# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: awsgypsy

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  stage: prod
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  #TODO: This function needs a role that can read users, read keys, and delete keys
  report_unused_iam_credentials:
    handler: report_runner/reports/unused_and_outdated_iam_credentials/unused_and_outdated_iam_credentials.lambda_handler
    events:
      - schedule: rate(24 hours)
  report_unattached_unecrypted_volumes:
    handler: report_runner/reports/volume_unattached_or_unencrypted/volume_unattached_or_unencrypted.lambda_handler
  remediation_port_probe:
    handler: remediation/GuardDuty/Findings/Low-Recon-EC2-PortProbeUnprotectedPort/PortProbeUnprotectedPort.lambda_handler
  #Failed attempt:
  #remediation_port_unprotectedport:
  #  handler: remediation/GuardDuty/Findings/Low-Recon-EC2-PortProbeUnprotectedPort/awsgypsyGDEC2PortScan_securitygroups.lambda_handler
  #Nothing to see here:
  #remediation_GDEC2Portscan:
  #  handler: remediation/GuardDuty/Findings/Medium-Recon-EC2-Portscan/GDEC2Portscan.lambda_handler
  remeditaiton_findings_gateway:
    handler: remediation/GuardDuty/FindingsGateway/GDFindings.lambda_handler
  remediation_cloudtrail_off:
    handler: remediation/WatchCloudTrail/WatchCloudTrail.lambda_handler
  tool_list_ec2:
    handler: tools/list-all-ec2.lambda_handler
  tool_s3_dups:
    handler: tools/s3-finddups/s3-finddups.lambda_handler
  tool_find_iam_from_key:
    handler: tools/findiamfromkey.lambda_handler
  tool_find_ec2_instance_by:
    handler: tools/find-ec2-instance-by-attribute/find_instances_by.lambda_handler
  remediation_GDFindings:
    handler: remediation/GuardDuty/FindingsGateway/GDFindings.lambda_handler
  system_setup_awsgypsy_s3:
    handler: system/setup_awsgypsy_s3bucket.lambda_handler





#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
